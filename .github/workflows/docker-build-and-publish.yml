name: Build and publish image

on:
  workflow_call:
    inputs:
      base_image:
        description: "The image to be used as a base for system containers"
        type: string
        required: false
      base_app_image:
        description: "The image to be used as a base for app containers"
        type: string
        required: false
      image_name:
        description: "The name of the image to build and publish"
        type: string
        required: true
      docker_path:
        description: "The path to the Dockerfile"
        type: string
        required: true
      platforms:
        description: "Which platforms should this image be built for?"
        default: "linux/amd64"
        type: string
        required: false
    outputs:
      image_tag:
        description: "The highest-priority tag assigned to the built image"
        value: ${{ jobs.docker.outputs.image_tag }}

jobs:
  # First, create a job to set up the matrix
  prepare:
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.set-platforms.outputs.platforms }}
    steps:
      - id: set-platforms
        run: |
          platforms=$(echo "${{ inputs.platforms }}" | tr ',' '\n' | jq -R -s -c 'split("\n")[:-1]')
          echo "platforms=${platforms}" >> $GITHUB_OUTPUT

  docker:
    needs: prepare
    runs-on: ${{ contains(matrix.platform, 'arm64') && github.repository == 'games-on-whales/gow' && 'ARM64' || 'ubuntu-latest' }}

    strategy:
      matrix:
        platform: ${{ fromJson(needs.prepare.outputs.platforms) }}

    outputs:
      image_tag: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
      images: ${{ steps.prep.outputs.images }}

    steps:
      - name: Validate inputs
        shell: bash
        # Currently GitHub does _not_ validate that required inputs are actually given :-(
        # see: https://github.com/actions/runner/issues/1070
        run: |
          # image name is always required
          [[ "${{ inputs.image_name }}" ]] || {
            echo "image_name input is empty but required"
            exit 1
          }

          # base image name is required unless building the base image itself
          [[ "${{ inputs.image_name }}" = "base" ]] ||
           [[ "${{ inputs.base_image }}" ]] || {
            echo "base_image input is empty but required"
            exit 1
           }

          # base_app_image is required unless building base or base-app
          [[ "${{ inputs.image_name }}" = "base" ]] ||
           [[ "${{ inputs.image_name }}" = "base-app" ]] ||
           [[ "${{ inputs.base_image }}" ]] || {
            echo "base_app_image input is empty but required"
            exit 1
           }

      - name: Checkout
        uses: actions/checkout@v4

      # Set derived configuration variables:
      # - images: images to build (docker and/or github)
      # - push: if images need to be uploaded to repository (when secrets available)
      # - has_docker_token
      # - has_github_token
      # - cache_from: image tag to use for imported cache
      # - cache_to: image tag to use for exported cache
      # - github_server_url: reference to source code repository
      - name: Prepare
        id: prep
        run: |
          IMAGES=""
          PUSH=false
          CURRENT_PLATFORM=${{ contains(matrix.platform, 'arm64') && 'arm64' || 'x86' }}

          if [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            IMAGES="gameonwhales/${{ inputs.image_name }}"
            PUSH=true
            echo "has_docker_token=true" >> $GITHUB_OUTPUT
          fi

          if [ -n "${{ secrets.GITHUB_TOKEN }}" ]; then
            REGISTRY_IMAGE="ghcr.io/${{ github.repository_owner }}/${{ inputs.image_name }}"
            if [ "$IMAGES" = "" ]; then
              IMAGES="ghcr.io/${REGISTRY_IMAGE}"
            else
              IMAGES="$IMAGES,ghcr.io/${REGISTRY_IMAGE}"
            fi
            PUSH=true
            echo "has_github_token=true" >> $GITHUB_OUTPUT
            echo "cache_from=type=registry,ref=${REGISTRY_IMAGE}:buildcache-${CURRENT_PLATFORM}"  >> $GITHUB_OUTPUT
            echo "cache_to=type=registry,ref=${REGISTRY_IMAGE}:buildcache-${CURRENT_PLATFORM},mode=max"  >> $GITHUB_OUTPUT
          else
            echo "cache_from=type=registry,ref=${REGISTRY_IMAGE}:buildcache-${CURRENT_PLATFORM}"  >> $GITHUB_OUTPUT
            echo "cache_to="  >> $GITHUB_OUTPUT
          fi

          echo "images=${IMAGES}"  >> $GITHUB_OUTPUT
          echo "push=${PUSH}"  >> $GITHUB_OUTPUT
          echo "github_server_url=${GITHUB_SERVER_URL}"  >> $GITHUB_OUTPUT
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: ${{ steps.prep.outputs.images }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}
            type=edge,branch=master
            type=ref,event=branch
            type=sha
          flavor: latest=auto #latest will point to last semver version (stable)

      # Prepare for multi-arch
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          version: latest
          driver-opts: image=moby/buildkit:master

      - name: Login to DockerHub
        if: steps.prep.outputs.has_docker_token != '' # secrets not available in PRs
        uses: docker/login-action@v3
        with:
          username: abeltramo
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        if: steps.prep.outputs.has_github_token != '' # secrets not available in PRs
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./${{ inputs.docker_path }}/${{ inputs.image_name }}/build
          file: ./${{ inputs.docker_path }}/${{ inputs.image_name }}/build/Dockerfile
          platforms: ${{ matrix.platform }}
          push: ${{ steps.prep.outputs.push }}
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            IMAGE_SOURCE=${{ steps.prep.outputs.github_server_url }}/${{ github.repository }}
            BASE_IMAGE=${{ inputs.base_image }}
            BASE_APP_IMAGE=${{ inputs.base_app_image }}
          cache-from: ${{ steps.prep.outputs.cache_from }}
          cache-to: ${{ steps.prep.outputs.cache_to }}

      - name: Image digest
        run: echo "${{ inputs.image_name }} > ${{ steps.docker_build.outputs.digest }}"

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.docker_build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ inputs.image_name }}-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          overwrite: true
          retention-days: 1

  # Based on https://docs.docker.com/build/ci/github-actions/multi-platform/
  # We have to merge the two AMD64 and ARM64 images into a single manifest list
  # Otherwise the image would be overridden by the last one pushed
  merge:
    runs-on: ubuntu-latest
    needs: [ docker ]
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-${{ inputs.image_name}}-*
          merge-multiple: true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: abeltramo
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ needs.docker.outputs.images }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}
            type=edge,branch=master
            type=ref,event=branch
            type=sha

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          if [ -n "${{ secrets.GITHUB_TOKEN }}" ]; then
              docker buildx imagetools create $(jq -cr '.tags | map(select(startswith("ghcr.io"))) | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
              $(printf 'ghcr.io/${{ github.repository_owner }}/${{ inputs.image_name }}@sha256:%s ' *)
          fi
                    # Create manifest for Docker Hub
          if [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
              docker buildx imagetools create $(jq -cr '.tags | map(select(startswith("gameonwhales"))) | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
              $(printf 'gameonwhales/${{ inputs.image_name }}@sha256:%s ' *)
          fi

      - name: Inspect image
        run: |
          if [ -n "${{ secrets.GITHUB_TOKEN }}" ]; then
            echo "Inspecting GHCR image:"
            docker buildx imagetools inspect ghcr.io/${{ github.repository_owner }}/${{ inputs.image_name }}:${{ steps.meta.outputs.version }}
          fi
          if [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "Inspecting Docker Hub image:"
            docker buildx imagetools inspect gameonwhales/${{ inputs.image_name }}:${{ steps.meta.outputs.version }}
          fi
